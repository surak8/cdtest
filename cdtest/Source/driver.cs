//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using Microsoft.VisualC;
using Microsoft.JScript;
using System.Diagnostics;
//using System.Text;
using System.IO;
using System.Text;

namespace NSCdtest {
    
    public class driver {
		const string DEFAULT_NAMESPACE="NSTest";
		const string ANAME="aname";
        [STAThread()]
        public static void Main(string[] args) {
			
			TextWriterTraceListener twtl;
			
			Trace.Listeners.Add(twtl=new TextWriterTraceListener(Console.Out,ANAME));
			Trace.WriteLine("Starts");
			CodeGeneratorOptions opts=new CodeGeneratorOptions();
			generate(
				new CodeDomProvider[] {
					new VBCodeProvider(),
					new JScriptCodeProvider(),
					new CppCodeProvider(),
					new CSharpCodeProvider(),
				},opts);
//			generate(new CSharpCodeProvider(),opts);
			Trace.WriteLine("Ends");
			Trace.Flush();
			Trace.Listeners.Remove(ANAME);
        }
	
	static void generate(CodeDomProvider [] providers,CodeGeneratorOptions opts){
		foreach(CodeDomProvider cdp in providers )
		generate(cdp,opts);
	}
		
		static void generate(CodeDomProvider cdp,CodeGeneratorOptions opts){
			CodeCompileUnit ccu=new CodeCompileUnit();
			CodeNamespace ns0,ns;
			string fname;
			StringBuilder sb;
			CodeTypeDeclaration ctd;
			
			ccu.Namespaces.AddRange(
			new CodeNamespace[] {
					ns0=new 	CodeNamespace(),
					ns=new CodeNamespace(DEFAULT_NAMESPACE)
				});
			ns.Types.Add(ctd=createType("c1",cdp));
			
			fname="tmp."+cdp.FileExtension;				
			using (TextWriter tw=new StringWriter(sb=new StringBuilder())){
				cdp.GenerateCodeFromCompileUnit(ccu,tw,opts);
			}
			Trace.WriteLine(sb.ToString());
			File.WriteAllText(fname,sb.ToString());
		}
		
		static CodeTypeDeclaration createType(string className,CodeDomProvider cdp){
			CodeTypeDeclaration ret=new 	 CodeTypeDeclaration(className);
			CodeMemberMethod m2;
			CodeMemberField f;
			CodeFieldReferenceExpression fr;
			CodeMemberProperty p;
			
						CodeEventReferenceExpression cere=new CodeEventReferenceExpression(ceThis,"myEvent");

						ret.Members.Add(f=createField(out fr));
						ret.Members.Add(p=createProperty(fr,f.Type));
			ret.Members.Add(m2=createSimpleMethod());
			ret.Members.Add(createStatementMethod(m2.Name,cdp,cere));
			
			return ret;
		}

	static CodeMemberField createField(out CodeFieldReferenceExpression fr){
		fr=new CodeFieldReferenceExpression(null,"_f");
		CodeMemberField f=new 	CodeMemberField(new CodeTypeReference(typeof(int)),fr.FieldName);
		
		f.Attributes=MemberAttributes.Static;
//		f.Att=
		return f;
	}		
	
	static readonly CodeExpression ceValue=new CodePropertySetValueReferenceExpression();
	
	static CodeMemberProperty createProperty(CodeFieldReferenceExpression fr,CodeTypeReference ctr) {
		CodeMemberProperty ret=new CodeMemberProperty();
		
		ret.Name="aProperty";
		ret.Type=ctr;
		ret.Attributes=MemberAttributes.Static;
		
		ret.GetStatements.Add(new CodeMethodReturnStatement(fr));
		ret.SetStatements.Add(new CodeAssignStatement(fr,ceValue));
	
		return ret;
		
	}
		static CodeMemberMethod createSimpleMethod(){
			CodeMemberMethod m=new CodeMemberMethod();
			
			m.Name="blah";
			m.Attributes=MemberAttributes.Static;
			return m;
		}
		
static readonly			CodeExpression ceZero=new CodePrimitiveExpression(0);
static readonly CodeExpression ceThis=new CodeThisReferenceExpression();

			static CodeTypeMember createStatementMethod(string otherMethodName,CodeDomProvider cdp,CodeEventReferenceExpression cere){
			CodeMemberMethod m=new 	CodeMemberMethod();
			
			/*
  System.CodeDom.CodeArgumentReferenceExpression
      System.CodeDom.CodeArrayCreateExpression
      System.CodeDom.CodeArrayIndexerExpression
      System.CodeDom.CodeBaseReferenceExpression
      System.CodeDom.CodeCastExpression
      System.CodeDom.CodeDefaultValueExpression
      System.CodeDom.CodeDelegateCreateExpression
      System.CodeDom.CodeDelegateInvokeExpression
      System.CodeDom.CodeDirectionExpression
     System.CodeDom.CodeIndexerExpression
      System.CodeDom.CodeParameterDeclarationExpression
     System.CodeDom.CodePropertyReferenceExpression

      System.CodeDom.CodeSnippetExpression
      System.CodeDom.CodeTypeOfExpression
      System.CodeDom.CodeTypeReferenceExpression

*/
			m.ReturnType=new CodeTypeReference	(typeof(bool));

			m.Name="test";
			m.Attributes=MemberAttributes.Static;
			
			CodeVariableReferenceExpression vr=new CodeVariableReferenceExpression("i");
			m.Statements.AddRange(new CodeStatement[]  {
				new CodeVariableDeclarationStatement (new CodeTypeReference(typeof(int)),vr.VariableName),
				new CodeSnippetStatement(),
				new CodeCommentStatement("comment"),
				new CodeAssignStatement(vr,ceZero),
				
				new CodeConditionStatement(
					new CodeBinaryOperatorExpression(vr,CodeBinaryOperatorType.IdentityInequality,ceZero),
					new CodeThrowExceptionStatement(
						new CodeObjectCreateExpression(new CodeTypeReference(typeof(NotImplementedException))))),
				new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(ceThis,otherMethodName))),
			});
			
			if (cdp.Supports(GeneratorSupport.GotoStatements)){
				const string LABEL_1="here";
				const string LABEL_2="there";
				m.Statements.Add(new CodeLabeledStatement(LABEL_1));
				m.Statements.Add(new CodeGotoStatement(LABEL_2));
				m.Statements.Add(new CodeLabeledStatement(LABEL_2));
			}else
				m.Statements.Add(new CodeSnippetStatement("#warning GOTO not allowed!"));
			
			
			if (cdp.Supports(GeneratorSupport.DeclareEvents)){
	//		CodeExpression ceTarget=new CodeSnippetExpression("anExpr");
			
			CodeExpression ceNull=new CodePrimitiveExpression();
			CodeDelegateCreateExpression cdce=new CodeDelegateCreateExpression(
				new CodeTypeReference("BlahEventHandler"),
				ceNull,
				"blah2");
//			m.Statements.Add(cdce);

			m.Statements.Add(new CodeAttachEventStatement(cere,cdce));
			m.Statements.Add(new CodeDelegateInvokeExpression(cere,ceNull));

			/*
			      System.CodeDom.CodeDelegateCreateExpression
      System.CodeDom.CodeDelegateInvokeExpression

			*/
			m.Statements.Add(new CodeRemoveEventStatement(cere,cdce));
			}
			
			m.Statements.Add(new CodeMethodReturnStatement(new CodePrimitiveExpression(false)));
			/*
      System.CodeDom.CodeIterationStatement
      System.CodeDom.CodeTryCatchFinallyStatement
			*/
			return m;
		}
    }
}
